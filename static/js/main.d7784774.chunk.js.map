{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","alt","this","props","business","name","address","city","zipcode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","Search","state","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOptions","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","onClick","handleSortByChange","getSortByClass","renderSortByOptions","onChange","placeholder","href","Yelp","fetch","headers","Authorization","then","response","json","jsonResponse","console","log","imageSrc","address1","categories","title","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d7784774.chunk.js","sourcesContent":["import React from 'react';\nimport '../Business/Business.css'\n\n\n\nclass Business extends React.Component {\n  render() {\n    return (\n      <div className=\"Business\">\n        <div className=\"image-container\">\n          <img src='https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg' alt='' />\n        </div>\n        <h2>{this.props.business.name}</h2>\n        <div className=\"Business-information\">\n          <div className=\"Business-address\">\n            <p>{this.props.business.address}</p>\n            <p>{this.props.business.city}</p>\n            <p>{this.props.business.zipcode}</p>\n          </div>\n          <div className=\"Business-reviews\">\n            <h3>{this.props.business.category}</h3>\n            <h3 className=\"rating\">{this.props.business.rating} stars</h3>\n            <p>{this.props.business.reviewCount}</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Business;\n\n","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\nclass BusinessList extends React.Component {\n    render() {\n        return (\n            <div className=\"BusinessList\">\n                {this.props.businesses.map(business => {\n                    return <Business key={business.id} business={business} />\n                })}\n            </div>\n        )\n    }\n}\n\nexport default BusinessList;","import React from 'react';\nimport '../SearchBar/SearchBar.css';\n\n\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      term: '',\n      location: '',\n      sortBy: 'best_match'\n    };\n\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n\n    this.sortByOptions = {\n      'Best Match': 'best_match',\n      'Highest Rated': 'rating',\n      'Most Reviewed': 'review_count'\n    };\n  }\n\n  getSortByClass(sortByOption) {\n    if (sortByOption === this.state.sortBy) {\n      return 'active';\n    }\n    else {\n      return '';\n    }\n  }\n\n  handleSortByChange(sortByOption) {\n    this.setState(\n      { sortBy: sortByOption }\n    );\n  }\n\nhandleTermChange(event){\n  this.setState(\n      {term: event.target.value }\n    )\n};\nhandleLocationChange(event){\n  this.setState(\n      {location: event.target.value}\n    )\n};\n\nhandleSearch(event) {\n  this.props.searchYelp(this.state.term,this.state.location,this.state.sortBy);\n  event.preventDefault();\n}\n\n\n\n  renderSortByOptions() {\n    return Object.keys(this.sortByOptions).map(sortByOption => {\n      let sortByOptionValue = this.sortByOptions[sortByOption];\n      return <li onClick={this.handleSortByChange.bind(this, sortByOptionValue)} className={this.getSortByClass(sortByOption)} key={sortByOptionValue}>{sortByOption}</li>;\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <div className=\"SearchBar-sort-options\">\n          <ul>\n            {this.renderSortByOptions()}\n          </ul>\n        </div>\n        <div className=\"SearchBar-fields\">\n          <input onChange={this.handleTermChange} placeholder=\"Search Businesses\" />\n          <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\n        </div>\n        <div className=\"SearchBar-submit\">\n          <a onClick={this.handleSearch} href=\"www.#.com\">Let's Go</a>\n        </div>\n      </div>\n    )\n  }\n\n}\nexport default Search;","const apiKey = 'Mh86mLdPvDcr7uB8InEE0bx2H9-CeNvw56TxdtFJ2F3mZjzRNw1Y1fJC15DjXeHMjZJncso5gHsQZGn4dCY_UXwuF0Mr-w8rk80milNEHU8mQ9gx1aM7Gvsa_ojTXnYx';\n\nconst Yelp  = {\n    searchYelp(term, location, sortBy) {\n    return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,{\n        headers: { \n            Authorization: `Bearer ${apiKey}`\n        }\n\n    }).then((response) => {\n        return response.json();\n    } ).then((jsonResponse) => {\n        if(jsonResponse.businesses) {\n            return jsonResponse.businesses.map(((business) => {\n                console.log(business);\n                return {\n                id: business.id,\n                imageSrc: business.imageSrc,\n                name: business.name,\n                address: business.location.address1,\n                city: business.location.city,\n                state: business.location.state,\n                zipcode: business.location.zipcode,\n                category: business.categories[0].title,\n                rating: business.rating,\n                reviewCount: business.reviewCount,\n            }\n        }));\n    }\n})\n}\n};\n\n\nexport default Yelp;\n\n","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Yelp from '../../util/Yelp';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businesses: [],\n    }\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy) {\n    Yelp.searchYelp(term, location, sortBy).then((businesses) => {\n      this.setState(\n        { businesses: businesses }\n      )\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Top Restaurants Around you</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    )\n  }\n\n\n\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}